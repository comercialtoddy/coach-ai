---
description: 
globs: 
alwaysApply: true
---
# 📋 TASK MASTER AI - WORKFLOW OBRIGATÓRIO

## **REGRA DE GESTÃO: TASK MASTER SEMPRE ATIVO**

### ✅ **USO OBRIGATÓRIO DO TASK MASTER AI**

**NUNCA trabalhe em funcionalidades sem usar o Task Master AI** que foi implementado no projeto.

### **COMANDOS ESSENCIAIS TASK MASTER**

#### **📋 Visualização e Navegação:**
```bash
# Ver todas as tarefas
tm list

# Ver próxima tarefa a trabalhar
tm next

# Ver detalhes de uma tarefa específica
tm show <id>

# Ver tarefas com subtarefas
tm list --with-subtasks
```

#### **⚡ Gestão de Status:**
```bash
# Iniciar trabalho em uma tarefa
tm set-status <id> in-progress

# Marcar tarefa como concluída
tm set-status <id> done

# Bloquear tarefa (problema encontrado)
tm set-status <id> blocked
```

#### **📝 Atualizações e Progresso:**
```bash
# Atualizar progresso de subtarefa
tm update-subtask --id=<subtask-id> --prompt="Progresso realizado: ..."

# Atualizar tarefa principal
tm update-task --id=<task-id> --prompt="Mudança de contexto: ..."

# Expandir tarefa em subtarefas
tm expand --id=<task-id> --research
```

## **WORKFLOW OBRIGATÓRIO DE DESENVOLVIMENTO**

### **🚀 FASE 1: Preparação**

1. **SEMPRE começar verificando o status:**
   ```bash
   tm list
   tm next
   ```

2. **Escolher tarefa e iniciar:**
   ```bash
   tm show <id>  # Entender completamente a tarefa
   tm set-status <id> in-progress
   ```

### **🔄 FASE 2: Desenvolvimento Iterativo**

**Para cada subtarefa implementada:**

1. **Implementar o código real** (sem mocks, seguindo [no-mocks-real-implementation.mdc](mdc:.cursor/rules/no-mocks-real-implementation.mdc))

2. **Documentar progresso imediatamente:**
   ```bash
   tm update-subtask --id=<subtask-id> --prompt="
   IMPLEMENTADO:
   - Código funcional em src/...
   - Testes passando
   - Integração validada
   
   DESCOBERTAS:
   - Desafio encontrado: ...
   - Solução aplicada: ...
   - Performance observada: ...
   "
   ```

3. **Atualizar status conforme progresso:**
   ```bash
   tm set-status <subtask-id> done
   ```

### **✅ FASE 3: Finalização**

1. **Validar integração completa**
2. **Executar testes funcionais**
3. **Marcar tarefa principal como concluída:**
   ```bash
   tm set-status <task-id> done
   ```

4. **Identificar próxima tarefa:**
   ```bash
   tm next
   ```

## **ESTRUTURA DO PROJETO TASK MASTER**

### **Arquivos Principais:**
- [tasks.json](mdc:.taskmaster/tasks/tasks.json) - Lista principal de tarefas
- [prd.txt](mdc:.taskmaster/docs/prd.txt) - Product Requirements Document
- [task-complexity-report.json](mdc:.taskmaster/reports/task-complexity-report.json) - Análise de complexidade

### **Diretórios Task Master:**
```
.taskmaster/
├── docs/          # Documentação e PRDs
├── tasks/         # Arquivos individuais de tarefas
├── reports/       # Relatórios de análise
└── templates/     # Templates para novos projetos
```

## **PADRÕES DE COMUNICAÇÃO NO TASK MASTER**

### **✅ Formato Correto para Updates:**

```bash
tm update-subtask --id=1.2 --prompt="
🎯 OBJETIVO: Implementar integração Tracker.gg API

✅ IMPLEMENTADO:
- TrackerService criado em src/services/trackerService.js
- Rate limiting implementado (100 req/min)
- Error handling com retry automático
- Cache Redis para dados de jogador (TTL: 5min)

📊 TESTES:
- ✅ Teste com Steam ID real: funcionando
- ✅ Teste rate limiting: bloqueando corretamente
- ✅ Teste cache: hit rate 89%

🚀 PRÓXIMO:
- Integrar com sistema de briefing pré-partida
- Adicionar métricas de performance
"
```

### **❌ Formato Incorreto:**
```bash
# NUNCA fazer assim
tm update-subtask --id=1.2 --prompt="Trabalhando na API"
# Muito vago, sem detalhes úteis
```

## **REGRAS DE PRIORIZAÇÃO**

### **📈 Sempre seguir esta ordem:**

1. **Tarefas BLOCKED** - Resolver primeiro
2. **Tarefas da Fase 1** - Foundation crítica  
3. **Tarefas com dependências resolvidas** - Fluxo natural
4. **Tarefas de alta complexidade** - Quebrar em subtarefas primeiro

### **🎯 Foco na Fase 1 (Crítica):**

**Tasks prioritárias para completar primeiro:**
- Task #1: Initialize Project Repositories & CI/CD
- Task #9: Research & Secure External API Access  
- Task #10: Integrate Tracker.gg & Steam APIs
- Task #2: Database & Cache Setup
- Task #3: Core Backend Services

## **GESTÃO DE COMPLEXIDADE**

### **📊 Análise de Complexidade Disponível:**

- **Relatório gerado:** `.taskmaster/reports/task-complexity-report.json`
- **11 tarefas de alta complexidade** identificadas
- **Score 6-10:** Expandir em subtarefas antes de implementar

### **⚡ Expandir Tarefas Complexas:**
```bash
# Para tarefas com score 7+
tm expand --id=<task-id> --research --force

# Verificar expansão
tm show <task-id>
```

## **MÉTRICAS E MONITORAMENTO**

### **📊 Dashboard Executivo:**
```bash
# Ver estatísticas gerais
tm list

# Análise de complexidade
tm complexity-report

# Ver todas as tags (contextos)
tm tags
```

### **🎯 KPIs Críticos:**
- **Tasks Done:** Meta 2-3 por semana
- **Blocked Tasks:** Manter em 0
- **Phase 1 Progress:** Completar em 2 semanas
- **Subtask Completion:** 90%+ antes de marcar task como done

## **INTEGRAÇÃO COM DESENVOLVIMENTO**

### **🔗 Conectar Task Master com Git:**

1. **Commits vinculados a tarefas:**
   ```bash
   git commit -m "feat(task-1.2): Implement Tracker.gg API integration
   
   - Add TrackerService with rate limiting
   - Implement Redis caching
   - Add comprehensive error handling
   
   Refs: Task #1.2 - Develop Tracker.gg API Service Module"
   ```

2. **Branches por tarefa/fase:**
   ```bash
   git checkout -b task-1-initialize-repos
   git checkout -b api-integration-poc
   ```

## **CRITÉRIOS DE QUALIDADE**

### **✅ Antes de marcar task como DONE:**

1. **Código implementado e funcionando** (não mock)
2. **Testes executados e passando**
3. **Integração validada** com sistemas existentes
4. **Documentação atualizada** via update-subtask
5. **Performance aceitável** (< 100ms para operações críticas)
6. **Error handling implementado**

### **🚫 NUNCA marcar como DONE se:**

- Código tem TODOs ou placeholders
- Testes não estão passando
- Funcionalidade não está integrada
- Performance está inaceitável
- Não há tratamento de erros

---

## **LEMBRE-SE:**

> **"O Task Master AI é nosso GPS para o sucesso comercial. Sem ele, perdemos direção e visibilidade do progresso."**

### **Benefícios do Workflow:**
- ✅ **Visibilidade total** do progresso
- ✅ **Priorização correta** de tarefas
- ✅ **Documentação automática** do desenvolvimento
- ✅ **Prevenção de bloqueios** por dependências
- ✅ **Qualidade garantida** por critérios claros

**USE O TASK MASTER AI EM 100% DO DESENVOLVIMENTO!**

