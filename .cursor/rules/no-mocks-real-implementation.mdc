---
description: 
globs: 
alwaysApply: true
---
# üö´ NO MOCKS - REAL IMPLEMENTATION ONLY

## **REGRA CR√çTICA: IMPLEMENTA√á√ÉO REAL OBRIGAT√ìRIA**

### ‚ùå **PROIBIDO TERMINANTEMENTE:**

- **Truncamento de c√≥digo** (nunca usar `// ... rest of implementation`)
- **Simula√ß√µes ou mocks** em c√≥digo de produ√ß√£o
- **Placeholders** como `// TODO: implement later`
- **Fun√ß√µes vazias** com `return null` ou `return {}`
- **Coment√°rios de exemplo** sem implementa√ß√£o real
- **Logs falsos** como `console.log('would do X')`
- **Dados hardcoded** para simular APIs
- **Timeouts para simular loading**
- **Promises que resolvem com dados fake**

### ‚úÖ **OBRIGAT√ìRIO SEMPRE:**

- **Implementa√ß√£o completa** de todas as funcionalidades
- **Servi√ßos reais** com l√≥gica de neg√≥cio completa
- **APIs funcionais** com endpoints implementados
- **Tratamento de erro real** em todos os casos
- **Valida√ß√£o completa** de dados de entrada
- **Logging real** para debugging e monitoramento
- **Testes funcionais** que validem comportamento real

## **EXEMPLOS DE IMPLEMENTA√á√ÉO**

### ‚ùå **ERRADO - Mock/Simula√ß√£o:**
```javascript
// NUNCA FAZER ISSO
async function fetchPlayerData(steamId) {
    // Simulate API call
    return new Promise(resolve => {
        setTimeout(() => {
            resolve({ name: 'Mock Player', rank: 'Global Elite' });
        }, 1000);
    });
}
```

### ‚úÖ **CORRETO - Implementa√ß√£o Real:**
```javascript
// SEMPRE FAZER ASSIM
async function fetchPlayerData(steamId) {
    try {
        const response = await axios.get(`${TRACKER_API_BASE}/profile/${steamId}`, {
            headers: { 'Authorization': `Bearer ${API_KEY}` },
            timeout: 5000
        });
        
        return {
            name: response.data.platformInfo.platformUserHandle,
            rank: response.data.segments[0].stats.rank.displayValue,
            winRate: response.data.segments[0].stats.wins.value,
            lastUpdated: new Date().toISOString()
        };
    } catch (error) {
        logger.error('Failed to fetch player data:', error);
        throw new APIError(`Unable to fetch data for player ${steamId}`);
    }
}
```

## **DIRETRIZES ESPEC√çFICAS POR TIPO**

### **APIs e Servi√ßos:**
- **Implementar endpoints completos** com valida√ß√£o
- **Conectar com bancos de dados reais** ([roundDatabase.js](mdc:src/database/roundDatabase.js))
- **Integrar com APIs externas** (Tracker.gg, Steam, etc.)
- **Implementar cache Redis** para performance
- **Adicionar rate limiting** e error handling

### **Frontend/UI:**
- **Componentes funcionais** com state management real
- **Formul√°rios com valida√ß√£o** completa
- **Loading states** baseados em requisi√ß√µes reais
- **Error boundaries** para tratamento de falhas
- **Routing funcional** entre p√°ginas/views

### **Sistema de IA (Gemini):**
- **Prompts reais** que geram respostas √∫teis
- **Integra√ß√£o completa** com [geminiClient.js](mdc:src/utils/geminiClient.js)
- **Processamento real** de dados GSI
- **Sistema de mem√≥ria** funcionando ([geminiMemory.js](mdc:src/database/geminiMemory.js))
- **Token optimization** implementado ([tokenOptimizer.js](mdc:src/utils/tokenOptimizer.js))

### **Machine Learning:**
- **Modelos treinados** com dados reais
- **Pipeline de dados** funcional
- **Infer√™ncia em tempo real** para [strategicInference.js](mdc:src/utils/strategicInference.js)
- **MLflow integration** para versionamento
- **Feature engineering** baseado em dados reais

## **ARQUIVOS DE REFER√äNCIA PARA IMPLEMENTA√á√ÉO REAL**

### **Sistemas Existentes (Use como base):**
- [elitePrompt.js](mdc:src/coach/elitePrompt.js) - Prompts elite implementados
- [autoAnalyzer.js](mdc:src/utils/autoAnalyzer.js) - An√°lise autom√°tica real
- [eventDetector.js](mdc:src/utils/eventDetector.js) - Detec√ß√£o de eventos funcional
- [geminiClient.js](mdc:src/utils/geminiClient.js) - Cliente real da API
- [tokenOptimizer.js](mdc:src/utils/tokenOptimizer.js) - Otimiza√ß√£o real de tokens

### **Estruturas de Dados Reais:**
- [roundDatabase.js](mdc:src/database/roundDatabase.js) - Banco de dados funcional
- [geminiMemory.js](mdc:src/database/geminiMemory.js) - Sistema de mem√≥ria real

## **PROCESSO DE VALIDA√á√ÉO**

### **Antes de Implementar:**
1. **Definir requisitos funcionais** espec√≠ficos
2. **Identificar depend√™ncias reais** (APIs, DBs, servi√ßos)
3. **Planejar tratamento de erros** para todos os cen√°rios
4. **Estabelecer crit√©rios de sucesso** mensur√°veis

### **Durante Implementa√ß√£o:**
1. **Testar com dados reais** sempre que poss√≠vel
2. **Implementar logging detalhado** para debugging
3. **Validar entrada e sa√≠da** de todas as fun√ß√µes
4. **Garantir performance adequada** (< 100ms para opera√ß√µes cr√≠ticas)

### **Ap√≥s Implementa√ß√£o:**
1. **Executar testes funcionais** completos
2. **Validar integra√ß√£o** com sistemas existentes
3. **Verificar conformidade** com arquitetura do projeto
4. **Documentar comportamento real** observado

## **CONSEQU√äNCIAS DO N√ÉO CUMPRIMENTO**

- **Rejei√ß√£o imediata** do c√≥digo
- **Refatora√ß√£o obrigat√≥ria** para implementa√ß√£o real
- **Revis√£o completa** da funcionalidade
- **Delay no cronograma** do projeto

## **LEMBRE-SE:**

> **"Estamos construindo um produto comercial de n√≠vel Tier 1. Cada linha de c√≥digo deve ser produ√ß√£o-ready desde o primeiro commit."**

### **Mentalidade Correta:**
- ‚úÖ **"Como um usu√°rio real utilizaria isso?"**
- ‚úÖ **"Que dados reais este c√≥digo processar√°?"**
- ‚úÖ **"Como isso falha e como recuperamos?"**
- ‚úÖ **"Isso funciona em produ√ß√£o com 1000+ usu√°rios?"**

### **Mentalidade Errada:**
- ‚ùå **"Vou implementar depois"**
- ‚ùå **"Por enquanto um mock serve"**
- ‚ùå **"√â s√≥ um prot√≥tipo"**
- ‚ùå **"Funciona no meu ambiente"**

---

**ESTA REGRA √â INEGOCI√ÅVEL E DEVE SER SEGUIDA EM 100% DAS IMPLEMENTA√á√ïES.**

