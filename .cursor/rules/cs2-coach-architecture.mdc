---
description: 
globs: 
alwaysApply: true
---
# 🏗️ CS2 COACH AI - ARCHITECTURAL PATTERNS

## **ARQUITETURA TIER 1 - PADRÕES OBRIGATÓRIOS**

### 🎯 **SISTEMA EXISTENTE (BASE PARA EXPANSÃO)**

O projeto já possui uma **arquitetura Tier 1 implementada** que deve ser respeitada e expandida, nunca substituída.

### **📁 ESTRUTURA DE DIRETÓRIOS ESTABELECIDA**

```
src/
├── main/              # Processo principal Electron
│   └── main.js        # [main.js](mdc:src/main/main.js)
├── coach/             # Sistema de prompts e coaching
│   ├── prompt.js      # [prompt.js](mdc:src/coach/prompt.js) - Prompts principais
│   └── elitePrompt.js # [elitePrompt.js](mdc:src/coach/elitePrompt.js) - Sistema elite
├── utils/             # Utilitários e engines avançados
│   ├── geminiClient.js      # [geminiClient.js](mdc:src/utils/geminiClient.js)
│   ├── autoAnalyzer.js      # [autoAnalyzer.js](mdc:src/utils/autoAnalyzer.js)
│   ├── tokenOptimizer.js    # [tokenOptimizer.js](mdc:src/utils/tokenOptimizer.js)
│   ├── strategicInference.js # [strategicInference.js](mdc:src/utils/strategicInference.js)
│   └── eventDetector.js     # [eventDetector.js](mdc:src/utils/eventDetector.js)
├── database/          # Sistemas de dados e memória
│   ├── roundDatabase.js  # [roundDatabase.js](mdc:src/database/roundDatabase.js)
│   └── geminiMemory.js   # [geminiMemory.js](mdc:src/database/geminiMemory.js)
└── themes/           # Interface e overlay
    └── clean-coach/  # Tema principal
```

## **🔧 PADRÕES DE INTEGRAÇÃO OBRIGATÓRIOS**

### **1. Sistema de IA (Gemini Integration)**

#### **✅ SEMPRE usar GeminiClient existente:**
```javascript
// CORRETO - Usar o cliente existente
const GeminiClient = require('../utils/geminiClient.js');

class NewService {
    constructor() {
        this.geminiClient = new GeminiClient();
    }
    
    async generateAnalysis(data) {
        // Usar sistema de prompts existente
        const promptData = buildPromptWithGSI('new_analysis_type', data);
        return await this.geminiClient.generateResponse(
            promptData.userPrompt,
            promptData.systemPrompt
        );
    }
}
```

#### **❌ NUNCA criar clientes Gemini separados:**
```javascript
// ERRADO - Não fazer
const { GoogleGenerativeAI } = require('@google/generative-ai');
// Isso quebra a arquitetura existente
```

### **2. Sistema de Prompts (Coach Integration)**

#### **✅ EXPANDIR o sistema existente:**
```javascript
// Em src/coach/prompt.js - ADICIONAR novos tipos
function buildPromptWithGSI(analysisType, gameData, context = '') {
    // ... código existente ...
    
    switch (analysisType) {
        // Casos existentes...
        
        case 'new_analysis_type':  // ADICIONAR aqui
            userMessage = `NOVO TIPO DE ANÁLISE\n${gsiData}\nESTRATÉGIA ESPECÍFICA`;
            break;
    }
}
```

#### **✅ USAR ElitePromptSystem para funcionalidades avançadas:**
```javascript
// Para recursos Tier 1
const ElitePromptSystem = require('../coach/elitePrompt.js');

class AdvancedAnalyzer {
    constructor() {
        this.elitePromptSystem = new ElitePromptSystem();
    }
    
    async analyze(gameData) {
        return this.elitePromptSystem.generateElitePrompt(
            'advanced_analysis',
            gameData,
            'contexto específico'
        );
    }
}
```

### **3. Sistema de Dados (Database Integration)**

#### **✅ USAR roundDatabase para dados de jogo:**
```javascript
// CORRETO - Integrar com sistema existente
const RoundDatabase = require('../database/roundDatabase.js');

class NewGameAnalyzer {
    constructor() {
        this.roundDb = new RoundDatabase();
    }
    
    analyzePattern() {
        const recentRounds = this.roundDb.getRecentRounds(10);
        const playerStats = this.roundDb.getPlayerStats();
        // Usar dados reais do sistema
    }
}
```

#### **✅ USAR geminiMemory para persistência de IA:**
```javascript
// CORRETO - Sistema de memória inteligente
const GeminiMemory = require('../database/geminiMemory.js');

async function storeAnalysisResult(analysis, context) {
    const memory = new GeminiMemory();
    await memory.storeConversation({
        input: context,
        output: analysis,
        effectiveness: 'positive',
        timestamp: Date.now()
    });
}
```

### **4. Sistema de Otimização (Performance)**

#### **✅ SEMPRE usar TokenOptimizer:**
```javascript
// OBRIGATÓRIO para novos recursos
const TokenOptimizer = require('../utils/tokenOptimizer.js');

class NewAPIIntegration {
    constructor() {
        this.tokenOptimizer = new TokenOptimizer();
    }
    
    async processGameData(gameData) {
        // Otimizar antes de enviar para IA
        const optimizedData = this.tokenOptimizer.optimizeGameData(
            gameData, 
            'new_analysis_type'
        );
        return optimizedData;
    }
}
```

#### **✅ INTEGRAR com StrategicInference:**
```javascript
// Para funcionalidades de predição
const StrategicInference = require('../utils/strategicInference.js');

class PredictiveAnalyzer {
    constructor() {
        this.strategicInference = new StrategicInference();
    }
    
    async predictOutcome(gameData, previousData) {
        this.strategicInference.updateInference(gameData, previousData);
        return this.strategicInference.generatePredictiveAnalysis(
            'prediction_phase',
            gameData
        );
    }
}
```

## **📡 PADRÕES DE API E SERVIÇOS**

### **🔗 APIs Externas (Tracker.gg, Steam, etc.)**

#### **✅ ESTRUTURA PADRÃO para novos serviços:**
```javascript
// Template para novos serviços de API
class ExternalAPIService {
    constructor(apiKey, baseUrl) {
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
        this.rateLimiter = new RateLimiter();
        this.cache = new Cache();
    }
    
    async fetchData(endpoint, params) {
        // 1. Verificar cache primeiro
        const cached = await this.cache.get(cacheKey);
        if (cached) return cached;
        
        // 2. Rate limiting
        await this.rateLimiter.wait();
        
        // 3. Request com error handling
        try {
            const response = await axios.get(`${this.baseUrl}${endpoint}`, {
                headers: { 'Authorization': `Bearer ${this.apiKey}` },
                timeout: 5000,
                params
            });
            
            // 4. Cache resultado
            await this.cache.set(cacheKey, response.data, TTL);
            
            return response.data;
        } catch (error) {
            logger.error(`API Error:`, error);
            throw new APIError(`Failed to fetch ${endpoint}`, error);
        }
    }
}
```

### **⚡ GSI Integration (Game State Integration)**

#### **✅ USAR padrões existentes do main.js:**
```javascript
// Seguir padrão do handleCS2Data em main.js
class NewGSIHandler {
    handleGameData(gameData) {
        // 1. Validar dados GSI
        if (!this.validateGSIData(gameData)) {
            return;
        }
        
        // 2. Processar com sistema existente
        const processedData = this.processGameData(gameData);
        
        // 3. Integrar com AutoAnalyzer
        this.triggerAnalysis(processedData);
    }
    
    triggerAnalysis(gameData) {
        // Usar AutoAnalyzer existente
        if (this.autoAnalyzer) {
            this.autoAnalyzer.analyzeGameState(gameData);
        }
    }
}
```

## **🎨 PADRÕES DE UI/UX (Electron + Overlay)**

### **✅ USAR tema clean-coach existente:**
```javascript
// Expandir temas existentes em src/themes/clean-coach/
// NUNCA criar sistemas de UI paralelos

// Para novos componentes:
class NewUIComponent {
    constructor() {
        this.loadExistingTheme();
        this.integrateWithShell();
    }
    
    loadExistingTheme() {
        // Usar CSS e estrutura do clean-coach
        this.themeCSS = require('./clean-coach/index.css');
    }
    
    integrateWithShell() {
        // Integrar com shell.js existente
        if (window.CoachAI) {
            window.CoachAI.registerComponent(this);
        }
    }
}
```

### **📱 Overlay System Integration**

#### **✅ SEGUIR padrão de overlay existente:**
```javascript
// Usar estrutura do main.js para overlays
createOverlay() {
    this.overlayWindow = new BrowserWindow({
        // Usar configurações existentes do main.js
        width: 400,
        height: 300,
        transparent: true,
        frame: false,
        alwaysOnTop: true,
        skipTaskbar: true,
        // ... outras configs do projeto
    });
}
```

## **🔄 PADRÕES DE EVENTOS E COMUNICAÇÃO**

### **✅ IPC Communication (Electron)**
```javascript
// USAR padrões do main.js
// Main Process
ipcMain.handle('new-feature-request', async (event, data) => {
    try {
        const result = await this.newFeatureHandler.process(data);
        return { success: true, data: result };
    } catch (error) {
        return { success: false, error: error.message };
    }
});

// Renderer Process
const result = await window.electronAPI.invoke('new-feature-request', data);
```

### **✅ Event Detection Integration**
```javascript
// EXPANDIR eventDetector.js existente
class EnhancedEventDetector extends EventDetector {
    constructor() {
        super();
        this.addNewEventTypes();
    }
    
    addNewEventTypes() {
        // Adicionar novos tipos sem quebrar existentes
        this.eventPriorities['new_event_type'] = 'HIGH';
        this.thresholds['new_event_type'] = { /* thresholds */ };
    }
}
```

## **🧠 PADRÕES DE MACHINE LEARNING**

### **✅ ESTRUTURA para novos modelos ML:**
```javascript
// Template para modelos ML
class MLModel {
    constructor(modelPath) {
        this.model = null;
        this.isLoaded = false;
        this.modelPath = modelPath;
    }
    
    async loadModel() {
        // Carregar modelo com error handling
        try {
            this.model = await tf.loadLayersModel(this.modelPath);
            this.isLoaded = true;
        } catch (error) {
            logger.error('Failed to load ML model:', error);
            throw error;
        }
    }
    
    async predict(inputData) {
        if (!this.isLoaded) {
            await this.loadModel();
        }
        
        // Preprocessar dados usando padrões existentes
        const preprocessed = this.preprocessData(inputData);
        
        // Fazer predição
        const prediction = this.model.predict(preprocessed);
        
        // Pós-processar resultado
        return this.postprocessPrediction(prediction);
    }
}
```

## **📊 PADRÕES DE LOGGING E MONITORING**

### **✅ LOGGING consistente:**
```javascript
// Usar console.log estruturado como no projeto
console.log(`[NEW_SERVICE] Iniciando análise: ${analysisType}`);
console.log(`[NEW_SERVICE] Dados processados: ${dataSize} bytes`);
console.error(`[NEW_SERVICE] Erro crítico:`, error);

// Para debugging (seguir padrão do projeto)
if (this.config.debug) {
    console.log(`[DEBUG] Estado interno:`, this.internalState);
}
```

## **⚙️ CONFIGURATION PATTERNS**

### **✅ USAR configurações existentes:**
```javascript
// Integrar com configurações do projeto
class NewService {
    constructor() {
        this.config = {
            // Usar padrões existentes
            useTokenOptimization: true,
            useStrategicInference: true,
            maxRetries: 3,
            timeout: 5000,
            debug: process.env.NODE_ENV === 'development'
        };
    }
}
```

## **🚀 DEPLOYMENT E BUILD PATTERNS**

### **✅ SEGUIR estrutura Electron existente:**
```javascript
// package.json - EXPANDIR, não substituir
{
    "scripts": {
        "start": "electron src/main/main.js",
        "build": "electron-builder",
        // Adicionar novos scripts aqui
        "test:new-feature": "jest tests/new-feature",
        "lint:new-service": "eslint src/services/new-service.js"
    }
}
```

---

## **🎯 CHECKLIST DE CONFORMIDADE ARQUITETURAL**

### **✅ Antes de implementar qualquer nova funcionalidade:**

1. **Integração verificada** com sistemas existentes
2. **Padrões de error handling** seguidos
3. **Sistema de logging** implementado
4. **Rate limiting** (se aplicável) configurado
5. **Cache strategy** definida
6. **Token optimization** aplicada
7. **Configurações** seguem padrão do projeto
8. **IPC communication** (se Electron) padronizada
9. **Event detection** integrado
10. **Performance** validada (< 100ms)

### **🚫 SINAIS DE VIOLAÇÃO ARQUITETURAL:**

- Criação de clientes AI paralelos
- Sistemas de prompt independentes
- Databases separados para dados similares
- UIs que não integram com clean-coach
- APIs sem rate limiting ou cache
- Logs inconsistentes com padrão do projeto
- Configurações hardcoded
- Funções que duplicam funcionalidade existente

---

## **LEMBRE-SE:**

> **"Esta arquitetura Tier 1 foi cuidadosamente projetada. Expanda, não substitua."**

**TODA nova funcionalidade deve ser uma extensão natural do sistema existente, mantendo a coesão e performance de nível profissional.**

